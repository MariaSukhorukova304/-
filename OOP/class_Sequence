import json


with open('D:\Phystech\To repositorium\Seminar1\OOP\rna_codon_table.json') as f:
    rnacodontable = json.load(f)


# Вспомогательный класс для вызова SequenceError
class SequenceError(Exception):
    def __init__(self, message: str):
        self.message = message
    
    def __str__(self):
        return f'{self.message}'
    

class Sequence(object):
    seq_type = None
    types = set(['DNA', 'RNA', 'Protein'])
    _prot_acids = set(rnacodontable.values())
    _dna_nucls = set(['A', 'T', 'C', 'G'])
    _rna_nucls = set(['A', 'U', 'C', 'G'])

    def __init__(self, file_name):
        self.file_name = file_name   
        self.seq_types, self.seq   = self._parse(file_name)


    def _parse(self, file_name: str) -> tuple[str, str]:
        """
        Input:
        - file_name : FASTA file with sequence_name, sequence_type and 
        the sequence itself

        Output: A tuple with (sequence, sequence_type)
        """
        #######################################################################
        # TODO:                                                               #
        # Open file_name and read its contents.                               #
        # Input file format:                                                  #
        # >sequence_name sequence_type                                        #
        # sequence                                                            #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        
        with open(self.file_name, "r") as file:
            lines = file.readlines()
            sequence = ""
            sequence_type = ""

            for i, line in enumerate(lines):
                line = line.strip()
                if ">" in line:
                     sequence_type = line.split()[1]
                     sequence = lines[i+1].strip()  
                     break  

        return (sequence_type, sequence)
    

    def _check(self, string):
        """
        Input:
        - string : sequence from FASTA file

        Output: A boolean value (True or False)
        """
        #######################################################################
        # TODO:                                                               #
        # Check that given type is in self.types                              #
        # Check that every element of given string is either in               #
        # self._prot_acids/self._dna_nucls/self._rna_nucls. If its true,      #
        # return True, else return False                                      #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

        if self.seq_types not in self.types:
            return False

        if self.seq_types == 'Protein':
            for i in self.seq:
                if i not in self._prot_acids:
                    return False
            
        elif self.seq_types == 'DNA':
            for i in self.seq:
                if i not in self._dna_nucls:
                    return False
            
        elif self.seq_types == 'RNA':
            for i in self.seq:
                if i not in self._rna_nucls:
                    return False
            
        else: 
             return False 

        return True
            

    def transcribe(self):
        raise NameError('')

    def hamming_distance(self):
        raise NameError('')

    def count_nucleotides(self):
        raise NameError('')
    
    def to_protein(self):
        raise NameError('')
    
    def transcribe(self):
        raise NameError('')